import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { AuthProvider, useAuth } from './AuthContext';  // Adjusted to import from AuthContext.js

// Custom component to test AuthProvider
const TestComponent = () => {
  const { isLoggedIn, login, logout } = useAuth();

  return (
    <div>
      <div>{`Logged In: ${isLoggedIn}`}</div>
      <button onClick={login}>Login</button>
      <button onClick={logout}>Logout</button>
    </div>
  );
};

describe('AuthContext', () => {
  beforeEach(() => {
    sessionStorage.clear();
  });

  it('should render the initial login state from sessionStorage', () => {
    sessionStorage.setItem('isLoggedIn', 'true');
    render(
      <AuthProvider>
        <TestComponent />
      </AuthProvider>
    );
    
    expect(screen.getByText('Logged In: true')).toBeInTheDocument();
  });

  it('should allow login and logout functionality', () => {
    render(
      <AuthProvider>
        <TestComponent />
      </AuthProvider>
    );

    // Initially logged out
    expect(screen.getByText('Logged In: false')).toBeInTheDocument();

    // Simulate login
    fireEvent.click(screen.getByText('Login'));
    expect(screen.getByText('Logged In: true')).toBeInTheDocument();

    // Simulate logout
    fireEvent.click(screen.getByText('Logout'));
    expect(screen.getByText('Logged In: false')).toBeInTheDocument();
  });

  it('should maintain login state across page reloads', () => {
    sessionStorage.setItem('isLoggedIn', 'true');
    render(
      <AuthProvider>
        <TestComponent />
      </AuthProvider>
    );

    expect(screen.getByText('Logged In: true')).toBeInTheDocument();
    
    // Simulate page reload
    window.location.reload = jest.fn();

    fireEvent.click(screen.getByText('Logout'));
    expect(screen.getByText('Logged In: false')).toBeInTheDocument();
  });
});
