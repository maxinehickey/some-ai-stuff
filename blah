import { render, screen, fireEvent } from '@testing-library/react';
import SimpleTestConfiguration from './SimpleTestConfiguration'; // Adjust the import path as needed

// Test 1: Verify Default Form State
test('renders the form with default values', () => {
  render(<SimpleTestConfiguration />);

  // Check if the "Application Name" input field is rendered
  expect(screen.getByLabelText(/Application Name:/i)).toBeInTheDocument();

  // Check if the "Scenario Name" input field is rendered
  expect(screen.getByLabelText(/Scenario Name:/i)).toBeInThepDolcument();

  // Check if the "Test Type" dropdown is rendered
  const testTypeSelect = screen.getByLabelText(/Test Type:/i);
  expect(testTypeSelect).toBeInTheDocument();

  // Check the default value of the "Test Type" dropdown
  expect(testTypeSelect.value).toBe('smoke_test');

  // Check if the "Save Config" button is rendered
  expect(screen.getByRole('button', { name: /Save Config/i })).toBeInTheDocument();
});

// Test 2: Test Validation on Form Submission (No Test Type Selected)
global.alert = jest.fn(); // Mock the alert function

test('shows alert if no test type is selected', () => {
  render(<SimpleTestConfiguration />);

  // Fill in the required fields
  fireEvent.change(screen.getByLabelText(/Application Name:/i), { target: { value: 'App1' } });
  fireEvent.change(screen.getByLabelText(/Scenario Name:/i), { target: { value: 'Scenario1' } });

  // Submit the form
  fireEvent.submit(screen.getByRole('button', { name: /Save Config/i }));

  // Assert that the alert is called with the expected message
  expect(global.alert).toHaveBeenCalledWith('Please select the type of test');
});

// Test 3: Test Form Submission with Valid Inputs
jest.mock('./foraltil', () => ({
  handleForm: jest.fn(),
  mapData: jest.fn(),
}));

test('submits form with valid inputs', () => {
  render(<SimpleTestConfiguration />);

  // Fill in the required fields
  fireEvent.change(screen.getByLabelText(/Application Name:/i), { target: { value: 'App1' } });
  fireEvent.change(screen.getByLabelText(/Scenario Name:/i), { target: { value: 'Scenario1' } });

  // Select a test type
  fireEvent.change(screen.getByLabelText(/Test Type:/i), { target: { value: 'peak_test' } });

  // Submit the form
  fireEvent.submit(screen.getByRole('button', { name: /Save Config/i }));

  // Check if the handleForm function is called after submitting the form
  expect(require('./foraltil').handleForm).toHaveBeenCalled();
  expect(require('./foraltil').mapData).toHaveBeenCalledWith("test type", 'peak_test');
});

// Test 4: Test that the Dropdown Changes the Test Type Value
test('dropdown changes the test type value', () => {
  render(<SimpleTestConfiguration />);

  const testTypeSelect = screen.getByLabelText(/Test Type:/i);

  // Select a different test type
  fireEvent.change(testTypeSelect, { target: { value: 'peak_test' } });

  // Check if the value of the dropdown has been updated
  expect(testTypeSelect.value).toBe('peak_test');
});

// Test 5: Test Form Submission with Invalid Inputs (Empty Fields)
global.alert = jest.fn(); // Mock the alert function

test('does not submit with empty required fields', () => {
  render(<SimpleTestConfiguration />);

  // Leave the required fields empty
  fireEvent.change(screen.getByLabelText(/Application Name:/i), { target: { value: '' } });
  fireEvent.change(screen.getByLabelText(/Scenario Name:/i), { target: { value: '' } });

  // Select a test type
  fireEvent.change(screen.getByLabelText(/Test Type:/i), { target: { value: 'peak_test' } });

  // Submit the form
  fireEvent.submit(screen.getByRole('button', { name: /Save Config/i }));

  // Assert that the alert function is called for empty required fields
  expect(global.alert).toHaveBeenCalledWith('Please select the type of test');
});

// Test 6: Test the Test Type Dropdown Options
test('renders the test type dropdown options', () => {
  render(<SimpleTestConfiguration />);

  const testTypeSelect = screen.getByLabelText(/Test Type:/i);

  // Check the dropdown options
  const options = screen.getAllByRole('option');
  expect(options).toHaveLength(5); // Including the disabled "Select Test Type" option
  
  expect(options[1]).toHaveTextContent('Smoke Test - 200 to 300 User - 1 LG');
  expect(options[2]).toHaveTextContent('Peak Test - 1k to 1.5k User - 4 to 5 LGs');
  expect(options[3]).toHaveTextContent('Stress Test - 500 to 2k User - 3 to 4 LGs');
  expect(options[4]).toHaveTextContent('Load Test - 400 to 600 User - 2 to 3 LGs');
});
