import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import TestManagementPage from './TestManagementPage';
import { fetchTestConfig } from '../../api-service/portalApiservice'; // Import the API call

// Mocking the fetchTestConfig function
jest.mock('../../api-service/portalApiservice', () => ({
  fetchTestConfig: jest.fn(),
}));

describe('TestManagementPage', () => {
  // Test case 1: Check if the component renders the test information
  test('renders test information correctly', async () => {
    // Mock the API call to return test data
    fetchTestConfig.mockResolvedValueOnce({
      project: 'Test Project',
      application_name: 'Test Application',
      scenario_name: 'Test Scenario',
      test_type: 'Functional',
      test_duration: '30 minutes',
      work_load: 'Medium',
      user_count: 100,
    });

    // Render the component
    render(<TestManagementPage />);

    // Wait for the test config to be loaded and check that the values are shown
    await waitFor(() => screen.getByDisplayValue('Test Project'));

    // Check if the inputs are showing the right values
    expect(screen.getByDisplayValue('Test Project')).toBeInTheDocument();
    expect(screen.getByDisplayValue('Test Application')).toBeInTheDocument();
    expect(screen.getByDisplayValue('Test Scenario')).toBeInTheDocument();
    expect(screen.getByDisplayValue('Functional')).toBeInTheDocument();
    expect(screen.getByDisplayValue('30 minutes')).toBeInTheDocument();
    expect(screen.getByDisplayValue('Medium')).toBeInTheDocument();
    expect(screen.getByDisplayValue('100')).toBeInTheDocument();
  });

  // Test case 2: Check if the "Execute Test" button works
  test('clicking "Execute Test" triggers the API call', async () => {
    // Mock the API call to return test data
    fetchTestConfig.mockResolvedValueOnce({
      project: 'Test Project',
      application_name: 'Test Application',
      scenario_name: 'Test Scenario',
      test_type: 'Functional',
      test_duration: '30 minutes',
      work_load: 'Medium',
      user_count: 100,
    });

    // Render the component
    render(<TestManagementPage />);

    // Wait for the test config to be loaded
    await waitFor(() => screen.getByDisplayValue('Test Project'));

    // Find the "Execute Test" button
    const button = screen.getByRole('button', { name: /Execute Test/i });

    // Mock the fetch function to simulate the button click
    global.fetch = jest.fn().mockResolvedValueOnce({
      json: () => Promise.resolve({ status: 'success' }),
    });

    // Simulate clicking the button
    fireEvent.click(button);

    // Check if the fetch was called when the button is clicked
    await waitFor(() => expect(global.fetch).toHaveBeenCalled());
  });

  // Test case 3: Check if the disclaimer message is shown
  test('displays the disclaimer message and link', () => {
    // Render the component
    render(<TestManagementPage />);

    // Check if the disclaimer text is present
    const disclaimerText = screen.getByText(/Disclaimer: Please verify the above test configuration details/i);
    expect(disclaimerText).toBeInTheDocument();

    // Check if the link to the configuration page is present
    const configLink = screen.getByRole('link', { name: /configuration Page/i });
    expect(configLink).toHaveAttribute('href', '/config');
  });
});
